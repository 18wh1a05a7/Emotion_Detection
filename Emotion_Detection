{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Emotion_Detection.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "mount_file_id": "1qFCwzG9uzN0odV0_p4kBCcbmzlwplMG-",
      "authorship_tag": "ABX9TyMqL/W9+950emaA19QoD5s6",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/18wh1a05a7/Emotion_Detection/blob/main/Emotion_Detection\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ceh2oAXpJ296"
      },
      "source": [
        "# **Emotion Detection**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UD6wJUEUKFDy"
      },
      "source": [
        "# Importing Library"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J7Cf_pl3iQ3S"
      },
      "source": [
        " \n",
        "import pandas as pd  \n",
        "from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n",
        "import numpy as np  \n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf   \n",
        "from keras.models import Sequential  \n",
        "from keras.layers import Dense, Dropout, Activation, Flatten  \n",
        "from keras.layers import Conv2D, MaxPooling2D, BatchNormalization,AveragePooling2D  \n",
        "from keras.losses import categorical_crossentropy  \n",
        "from keras.optimizers import Adam   \n",
        "from keras.regularizers import l2  \n",
        "from keras.utils import np_utils \n",
        "\n",
        "from keras.models import load_model\n",
        "from keras.preprocessing.image import img_to_array\n",
        "from keras.preprocessing import image\n",
        "import cv2  as cv\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h0vD7c0DKR6l"
      },
      "source": [
        "# **Loading Data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7Joia3cwiS48"
      },
      "source": [
        "df = pd.read_csv('/content/drive/MyDrive/WISE_ML/fer2013.csv')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7FcBa1EiiXTj",
        "outputId": "d6358f42-70f6-4b14-ac4f-80f24747ed71"
      },
      "source": [
        "print (df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "       emotion                                             pixels        Usage\n",
            "0            0  70 80 82 72 58 58 60 63 54 58 60 48 89 115 121...     Training\n",
            "1            0  151 150 147 155 148 133 111 140 170 174 182 15...     Training\n",
            "2            2  231 212 156 164 174 138 161 173 182 200 106 38...     Training\n",
            "3            4  24 32 36 30 32 23 19 20 30 41 21 22 32 34 21 1...     Training\n",
            "4            6  4 0 0 0 0 0 0 0 0 0 0 0 3 15 23 28 48 50 58 84...     Training\n",
            "...        ...                                                ...          ...\n",
            "35882        6  50 36 17 22 23 29 33 39 34 37 37 37 39 43 48 5...  PrivateTest\n",
            "35883        3  178 174 172 173 181 188 191 194 196 199 200 20...  PrivateTest\n",
            "35884        0  17 17 16 23 28 22 19 17 25 26 20 24 31 19 27 9...  PrivateTest\n",
            "35885        3  30 28 28 29 31 30 42 68 79 81 77 67 67 71 63 6...  PrivateTest\n",
            "35886        2  19 13 14 12 13 16 21 33 50 57 71 84 97 108 122...  PrivateTest\n",
            "\n",
            "[35887 rows x 3 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EW7jyEv0KvOW"
      },
      "source": [
        "# **Splitting training and testing data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3xM217wuilSj"
      },
      "source": [
        "X_train,train_y,X_test,test_y=[],[],[],[] "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oUd9FIN6ilW-"
      },
      "source": [
        "for index, row in df.iterrows():  \n",
        "    val=row['pixels'].split(\" \")  \n",
        "    try:  \n",
        "        if 'Training' in row['Usage']:  \n",
        "           X_train.append(np.array(val,'float32'))  \n",
        "           train_y.append(row['emotion'])  \n",
        "        elif 'PublicTest' == row['Usage']  or 'PrivateTest' == row ['Usage']:  \n",
        "           X_test.append(np.array(val,'float32'))  \n",
        "           test_y.append(row['emotion'])\n",
        "        \n",
        "    except:  \n",
        "        print(f\"error occured at index :{index} and row:{row}\")  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4yubl38gK3ja"
      },
      "source": [
        "# **Reshaping training and testing data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6tCK1eGCilam"
      },
      "source": [
        "num_labels = 7  \n",
        "batch_size = 120\n",
        "epochs = 100 \n",
        "width, height = 48, 48"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OcuKJvnPildZ"
      },
      "source": [
        "X_train = np.array(X_train,'float32')  \n",
        "train_y = np.array(train_y,'float32')  \n",
        "X_test = np.array(X_test,'float32')  \n",
        "test_y = np.array(test_y,'float32') "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Pwh3_jnYiXd4"
      },
      "source": [
        "train_y=np_utils.to_categorical(train_y, num_classes=num_labels)  \n",
        "test_y=np_utils.to_categorical(test_y, num_classes=num_labels) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GGsjMp-TiwkK"
      },
      "source": [
        "X_train -= np.mean(X_train, axis=0)  \n",
        "X_train /= np.std(X_train, axis=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mktLa5siiwnt"
      },
      "source": [
        "X_test -= np.mean(X_test, axis=0)  \n",
        "X_test /= np.std(X_test, axis=0)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "71XcgTp1i06W"
      },
      "source": [
        "X_train = X_train.reshape(X_train.shape[0], 48, 48, 1)  \n",
        "  \n",
        "X_test = X_test.reshape(X_test.shape[0], 48, 48, 1)  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mjHfa0AJK90Q"
      },
      "source": [
        "# **Model Building**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Z7UMaZmfi09E"
      },
      "source": [
        "model = Sequential()\n",
        "#layer 1\n",
        "model.add(Conv2D(32, kernel_size=(3, 3), activation='relu', input_shape=(48,48,1),padding = 'same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "# layer 2\n",
        "model.add(Conv2D(64, kernel_size=(3, 3), activation='relu',padding = 'same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "#layer 3\n",
        "model.add(Conv2D(64, kernel_size=(3, 3), activation='relu',padding = 'same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "#layer4 \n",
        "model.add(Conv2D(64, kernel_size=(3, 3), activation='relu',padding = 'same'))\n",
        "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "model.add(Flatten())\n",
        "\n",
        "#fully connected layer\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "model.add(Dense(128, activation='relu'))\n",
        "model.add(Dropout(0.25))\n",
        "\n",
        "model.add(Dense(7, activation='softmax'))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "r4XVi9rULG3X"
      },
      "source": [
        "# **Compiling the data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "M3WSzDF_i1Ag"
      },
      "source": [
        "model.compile(loss=categorical_crossentropy,  \n",
        "              optimizer=Adam(),  \n",
        "              metrics=['accuracy'])  \n",
        "  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bSvvABvojTfM"
      },
      "source": [
        " early_stopping = tf.keras.callbacks.EarlyStopping(\n",
        "    monitor='val_loss', min_delta=0, patience=8, verbose=0,\n",
        "    mode='auto', baseline=None, restore_best_weights=True\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M9hCnK1LLOEh"
      },
      "source": [
        "# **Training the data**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CCzskEzCjTiv",
        "outputId": "0c383a85-38a0-46ae-ff94-41f1e28064c9"
      },
      "source": [
        "history = model.fit(np.array(X_train), np.array(train_y),\n",
        "          batch_size=batch_size,\n",
        "          epochs=epochs,\n",
        "          verbose=1,\n",
        "          validation_data=(np.array(X_test), np.array(test_y)),\n",
        "          callbacks=[early_stopping],\n",
        "          shuffle=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "240/240 [==============================] - 5s 15ms/step - loss: 1.8161 - accuracy: 0.2412 - val_loss: 1.6622 - val_accuracy: 0.3437\n",
            "Epoch 2/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.6467 - accuracy: 0.3480 - val_loss: 1.4666 - val_accuracy: 0.4411\n",
            "Epoch 3/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.5063 - accuracy: 0.4075 - val_loss: 1.3739 - val_accuracy: 0.4785\n",
            "Epoch 4/100\n",
            "240/240 [==============================] - 3s 14ms/step - loss: 1.4435 - accuracy: 0.4464 - val_loss: 1.3115 - val_accuracy: 0.4978\n",
            "Epoch 5/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.3584 - accuracy: 0.4786 - val_loss: 1.2714 - val_accuracy: 0.5075\n",
            "Epoch 6/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.3218 - accuracy: 0.4942 - val_loss: 1.2408 - val_accuracy: 0.5215\n",
            "Epoch 7/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.2845 - accuracy: 0.5128 - val_loss: 1.2191 - val_accuracy: 0.5305\n",
            "Epoch 8/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.2689 - accuracy: 0.5149 - val_loss: 1.1941 - val_accuracy: 0.5344\n",
            "Epoch 9/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.2434 - accuracy: 0.5252 - val_loss: 1.1832 - val_accuracy: 0.5424\n",
            "Epoch 10/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.2405 - accuracy: 0.5273 - val_loss: 1.1662 - val_accuracy: 0.5508\n",
            "Epoch 11/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1852 - accuracy: 0.5507 - val_loss: 1.1392 - val_accuracy: 0.5577\n",
            "Epoch 12/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1820 - accuracy: 0.5538 - val_loss: 1.1271 - val_accuracy: 0.5628\n",
            "Epoch 13/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1665 - accuracy: 0.5604 - val_loss: 1.1273 - val_accuracy: 0.5684\n",
            "Epoch 14/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1675 - accuracy: 0.5545 - val_loss: 1.1174 - val_accuracy: 0.5705\n",
            "Epoch 15/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1554 - accuracy: 0.5655 - val_loss: 1.1057 - val_accuracy: 0.5779\n",
            "Epoch 16/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1424 - accuracy: 0.5627 - val_loss: 1.1006 - val_accuracy: 0.5776\n",
            "Epoch 17/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1191 - accuracy: 0.5759 - val_loss: 1.0986 - val_accuracy: 0.5805\n",
            "Epoch 18/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1177 - accuracy: 0.5768 - val_loss: 1.0783 - val_accuracy: 0.5943\n",
            "Epoch 19/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1121 - accuracy: 0.5847 - val_loss: 1.0748 - val_accuracy: 0.5867\n",
            "Epoch 20/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.1062 - accuracy: 0.5792 - val_loss: 1.0863 - val_accuracy: 0.5851\n",
            "Epoch 21/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0884 - accuracy: 0.5824 - val_loss: 1.0743 - val_accuracy: 0.5917\n",
            "Epoch 22/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0914 - accuracy: 0.5900 - val_loss: 1.0687 - val_accuracy: 0.5988\n",
            "Epoch 23/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0748 - accuracy: 0.5914 - val_loss: 1.0693 - val_accuracy: 0.5919\n",
            "Epoch 24/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0743 - accuracy: 0.5919 - val_loss: 1.0660 - val_accuracy: 0.5889\n",
            "Epoch 25/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0704 - accuracy: 0.5973 - val_loss: 1.0727 - val_accuracy: 0.5945\n",
            "Epoch 26/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0534 - accuracy: 0.6009 - val_loss: 1.0670 - val_accuracy: 0.5889\n",
            "Epoch 27/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0573 - accuracy: 0.5977 - val_loss: 1.0545 - val_accuracy: 0.5977\n",
            "Epoch 28/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0450 - accuracy: 0.6105 - val_loss: 1.0586 - val_accuracy: 0.5942\n",
            "Epoch 29/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0424 - accuracy: 0.6058 - val_loss: 1.0574 - val_accuracy: 0.5989\n",
            "Epoch 30/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0424 - accuracy: 0.6034 - val_loss: 1.0434 - val_accuracy: 0.6046\n",
            "Epoch 31/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0213 - accuracy: 0.6136 - val_loss: 1.0490 - val_accuracy: 0.6045\n",
            "Epoch 32/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0278 - accuracy: 0.6090 - val_loss: 1.0535 - val_accuracy: 0.6046\n",
            "Epoch 33/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0317 - accuracy: 0.6141 - val_loss: 1.0502 - val_accuracy: 0.5977\n",
            "Epoch 34/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0122 - accuracy: 0.6187 - val_loss: 1.0483 - val_accuracy: 0.6038\n",
            "Epoch 35/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0202 - accuracy: 0.6148 - val_loss: 1.0449 - val_accuracy: 0.6031\n",
            "Epoch 36/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0244 - accuracy: 0.6205 - val_loss: 1.0452 - val_accuracy: 0.6046\n",
            "Epoch 37/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0144 - accuracy: 0.6099 - val_loss: 1.0419 - val_accuracy: 0.6099\n",
            "Epoch 38/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9910 - accuracy: 0.6251 - val_loss: 1.0357 - val_accuracy: 0.6133\n",
            "Epoch 39/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 1.0064 - accuracy: 0.6190 - val_loss: 1.0401 - val_accuracy: 0.6053\n",
            "Epoch 40/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9921 - accuracy: 0.6233 - val_loss: 1.0392 - val_accuracy: 0.6105\n",
            "Epoch 41/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9940 - accuracy: 0.6272 - val_loss: 1.0378 - val_accuracy: 0.6080\n",
            "Epoch 42/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9837 - accuracy: 0.6294 - val_loss: 1.0335 - val_accuracy: 0.6037\n",
            "Epoch 43/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9897 - accuracy: 0.6302 - val_loss: 1.0305 - val_accuracy: 0.6070\n",
            "Epoch 44/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9934 - accuracy: 0.6257 - val_loss: 1.0390 - val_accuracy: 0.6082\n",
            "Epoch 45/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9825 - accuracy: 0.6325 - val_loss: 1.0353 - val_accuracy: 0.6085\n",
            "Epoch 46/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9741 - accuracy: 0.6353 - val_loss: 1.0259 - val_accuracy: 0.6089\n",
            "Epoch 47/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9802 - accuracy: 0.6325 - val_loss: 1.0338 - val_accuracy: 0.6082\n",
            "Epoch 48/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9797 - accuracy: 0.6295 - val_loss: 1.0325 - val_accuracy: 0.6098\n",
            "Epoch 49/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9760 - accuracy: 0.6349 - val_loss: 1.0329 - val_accuracy: 0.6159\n",
            "Epoch 50/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9732 - accuracy: 0.6341 - val_loss: 1.0340 - val_accuracy: 0.6053\n",
            "Epoch 51/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9664 - accuracy: 0.6370 - val_loss: 1.0279 - val_accuracy: 0.6115\n",
            "Epoch 52/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9620 - accuracy: 0.6369 - val_loss: 1.0356 - val_accuracy: 0.6073\n",
            "Epoch 53/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9584 - accuracy: 0.6326 - val_loss: 1.0244 - val_accuracy: 0.6133\n",
            "Epoch 54/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9694 - accuracy: 0.6321 - val_loss: 1.0215 - val_accuracy: 0.6116\n",
            "Epoch 55/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9484 - accuracy: 0.6471 - val_loss: 1.0159 - val_accuracy: 0.6167\n",
            "Epoch 56/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9564 - accuracy: 0.6438 - val_loss: 1.0183 - val_accuracy: 0.6154\n",
            "Epoch 57/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9523 - accuracy: 0.6412 - val_loss: 1.0189 - val_accuracy: 0.6163\n",
            "Epoch 58/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9608 - accuracy: 0.6379 - val_loss: 1.0229 - val_accuracy: 0.6112\n",
            "Epoch 59/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9486 - accuracy: 0.6411 - val_loss: 1.0301 - val_accuracy: 0.6064\n",
            "Epoch 60/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9549 - accuracy: 0.6407 - val_loss: 1.0287 - val_accuracy: 0.6137\n",
            "Epoch 61/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9290 - accuracy: 0.6502 - val_loss: 1.0216 - val_accuracy: 0.6172\n",
            "Epoch 62/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9413 - accuracy: 0.6434 - val_loss: 1.0165 - val_accuracy: 0.6218\n",
            "Epoch 63/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9273 - accuracy: 0.6452 - val_loss: 1.0148 - val_accuracy: 0.6199\n",
            "Epoch 64/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9346 - accuracy: 0.6491 - val_loss: 1.0356 - val_accuracy: 0.6077\n",
            "Epoch 65/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9413 - accuracy: 0.6485 - val_loss: 1.0224 - val_accuracy: 0.6147\n",
            "Epoch 66/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9390 - accuracy: 0.6473 - val_loss: 1.0222 - val_accuracy: 0.6144\n",
            "Epoch 67/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9251 - accuracy: 0.6558 - val_loss: 1.0298 - val_accuracy: 0.6151\n",
            "Epoch 68/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9444 - accuracy: 0.6429 - val_loss: 1.0213 - val_accuracy: 0.6176\n",
            "Epoch 69/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9246 - accuracy: 0.6560 - val_loss: 1.0252 - val_accuracy: 0.6167\n",
            "Epoch 70/100\n",
            "240/240 [==============================] - 3s 14ms/step - loss: 0.9136 - accuracy: 0.6553 - val_loss: 1.0284 - val_accuracy: 0.6091\n",
            "Epoch 71/100\n",
            "240/240 [==============================] - 3s 13ms/step - loss: 0.9216 - accuracy: 0.6506 - val_loss: 1.0251 - val_accuracy: 0.6119\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kwvUdm-fLT3H"
      },
      "source": [
        "# **Accuracy**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VZZFXmONtuNk",
        "outputId": "20ad4bf1-b109-4335-8288-59649be2bbd7"
      },
      "source": [
        "scores = model.evaluate(X_test, test_y, verbose=0)\n",
        "print(\"Accuracy: %.2f%%\" % (scores[1]*100))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Accuracy: 61.99%\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hZt4gS3wLbIQ"
      },
      "source": [
        "# **Plotting Graph**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_Nzx7OKSt4iS"
      },
      "source": [
        "%matplotlib inline\n",
        "\n",
        "def plot_metric(history, metric):\n",
        "    train_metrics = history.history[metric]\n",
        "    val_metrics = history.history['val_'+metric]\n",
        "    epochs = range(1, len(train_metrics) + 1)\n",
        "    plt.plot(epochs, train_metrics)\n",
        "    plt.plot(epochs, val_metrics)\n",
        "    plt.title('Training and validation '+ metric)\n",
        "    plt.xlabel(\"Epochs\")\n",
        "    plt.ylabel(metric)\n",
        "    plt.legend([\"train_\"+metric, 'val_'+metric])\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "2pTTCojLuABs",
        "outputId": "225c7a54-5762-4764-9044-c0ac7b126aa2"
      },
      "source": [
        "plot_metric(history, 'loss') "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "VQK6A-rCwtU6",
        "outputId": "e07f560a-aa2a-42c4-abef-734f66935191"
      },
      "source": [
        "plot_metric(history, 'accuracy') "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wQcvgxkzLlCx"
      },
      "source": [
        "# **Saving the model**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3FP5DwfMjRoe",
        "outputId": "8827937f-f924-4b2f-f00c-24062b68eaad"
      },
      "source": [
        "model_json = model.to_json()\n",
        "with open(\"model.json\", \"w\") as json_file:\n",
        " json_file.write(model_json)\n",
        "model.save_weights(\"model.h5\")\n",
        "print(\"Saved model to disk\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Saved model to disk\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RzNIcoOmJ0Pe"
      },
      "source": [
        "# **OpenCV**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JP4u3_EAk_9Z"
      },
      "source": [
        "from keras.models import load_model\n",
        "from keras.preprocessing.image import img_to_array\n",
        "from keras.preprocessing import image\n",
        "from keras.models import model_from_json\n",
        "import cv2,time\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "55RMUdHBLxA1"
      },
      "source": [
        "from IPython.display import display, Javascript\n",
        "from google.colab.output import eval_js\n",
        "from base64 import b64decode\n",
        "\n",
        "def take_photo(filename='photo.jpg', quality=0.8):\n",
        "  js = Javascript('''\n",
        "    async function takePhoto(quality) {\n",
        "      const div = document.createElement('div');\n",
        "      const capture = document.createElement('button');\n",
        "      capture.textContent = 'Capture';\n",
        "      div.appendChild(capture);\n",
        "\n",
        "      const video = document.createElement('video');\n",
        "      video.style.display = 'block';\n",
        "      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n",
        "\n",
        "      document.body.appendChild(div);\n",
        "      div.appendChild(video);\n",
        "      video.srcObject = stream;\n",
        "      await video.play();\n",
        "\n",
        "      \n",
        "      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n",
        "\n",
        "      \n",
        "      await new Promise((resolve) => capture.onclick = resolve);\n",
        "\n",
        "      const canvas = document.createElement('canvas');\n",
        "      canvas.width = video.videoWidth;\n",
        "      canvas.height = video.videoHeight;\n",
        "      canvas.getContext('2d').drawImage(video, 0, 0);\n",
        "      stream.getVideoTracks()[0].stop();\n",
        "      div.remove();\n",
        "      return canvas.toDataURL('image/jpeg', quality);\n",
        "    }\n",
        "    ''')\n",
        "  display(js)\n",
        "  data = eval_js('takePhoto({})'.format(quality))\n",
        "  binary = b64decode(data.split(',')[1])\n",
        "  with open(filename, 'wb') as f:\n",
        "    f.write(binary)\n",
        "  return filename"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GmDq4he4Lx9R"
      },
      "source": [
        "from IPython.display import Image\n",
        "try:\n",
        "  filename = take_photo()\n",
        "  print('Saved to {}'.format(filename))\n",
        "  \n",
        " \n",
        "  display(Image(filename))\n",
        "except Exception as err:\n",
        " \n",
        "  print(str(err))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yxiVQJUchx-B"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "F_gJy3RMhyA4"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GgtkTfIxhyEO"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}